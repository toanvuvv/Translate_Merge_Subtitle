[38;2;118;181;197m1
[0m00:00:01,270 --> 00:00:04,520
<v Narrator>Now before diving into some NodeJS code,</v>
<v Tr√¨nh t∆∞·ªùng thu·∫≠t>B√¢y gi·ªù tr∆∞·ªõc khi ƒëi s√¢u v√†o m·ªôt s·ªë m√£ NodeJS,</v>

[38;2;118;181;197m2
[0m00:00:04,520 --> 00:00:06,700
let's do a high level overview
ch√∫ng ta h√£y l√†m m·ªôt c√°i nh√¨n t·ªïng quan c·∫•p cao

[38;2;118;181;197m3
[0m00:00:06,700 --> 00:00:08,990
of what NodeJS actually is,
v·ªÅ vi·ªác NodeJS th·ª±c s·ª± l√† g√¨,

[38;2;118;181;197m4
[0m00:00:08,990 --> 00:00:11,800
what we use it for and why we use Node
ch√∫ng t√¥i s·ª≠ d·ª•ng n√≥ ƒë·ªÉ l√†m g√¨ v√† t·∫°i sao ch√∫ng t√¥i s·ª≠ d·ª•ng Node

[38;2;118;181;197m5
[0m00:00:11,800 --> 00:00:13,843
instead of other technologies.
thay v√¨ c√°c c√¥ng ngh·ªá kh√°c.

[38;2;118;181;197m6
[0m00:00:15,410 --> 00:00:17,570
So, the official definition is that
V√¨ v·∫≠y, ƒë·ªãnh nghƒ©a ch√≠nh th·ª©c l√†

[38;2;118;181;197m7
[0m00:00:17,570 --> 00:00:19,480
NodeJS is a JavaScript Runtime
NodeJS l√† Th·ªùi gian ch·∫°y JavaScript

[38;2;118;181;197m8
[0m00:00:19,480 --> 00:00:23,783
built on Google's open-source V8 JavaScript engine.
ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n c√¥ng c·ª• JavaScript V8 m√£ ngu·ªìn m·ªü c·ªßa Google.

[38;2;118;181;197m9
[0m00:00:23,783 --> 00:00:26,279
Now, what does that actually mean?
B√¢y gi·ªù, ƒëi·ªÅu ƒë√≥ th·ª±c s·ª± c√≥ nghƒ©a l√† g√¨?

[38;2;118;181;197m10
[0m00:00:26,279 --> 00:00:29,289
Well, let's start by trying to understand
N√†o, h√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch c·ªë g·∫Øng hi·ªÉu

[38;2;118;181;197m11
[0m00:00:29,289 --> 00:00:31,174
what the JavaScript Runtime
Th·ªùi gian ch·∫°y JavaScript l√† g√¨

[38;2;118;181;197m12
[0m00:00:31,174 --> 00:00:33,913
and the V8 engine actually are.
v√† th·ª±c t·∫ø l√† ƒë·ªông c∆° V8.

[38;2;118;181;197m13
[0m00:00:35,190 --> 00:00:37,914
So, you have probably already used JavaScript before
V√¨ v·∫≠y, c√≥ th·ªÉ b·∫°n ƒë√£ t·ª´ng s·ª≠ d·ª•ng JavaScript tr∆∞·ªõc ƒë√¢y

[38;2;118;181;197m14
[0m00:00:37,914 --> 00:00:42,120
and it was probably always just inside a browser, right?
v√† c√≥ l·∫Ω n√≥ lu√¥n ·ªü b√™n trong tr√¨nh duy·ªát, ph·∫£i kh√¥ng?

[38;2;118;181;197m15
[0m00:00:42,120 --> 00:00:45,400
Because any browser natively understands
B·ªüi v√¨ b·∫•t k·ª≥ tr√¨nh duy·ªát n√†o c≈©ng c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c

[38;2;118;181;197m16
[0m00:00:45,400 --> 00:00:49,250
HTML, CSS, and JavaScript and no matter
HTML, CSS v√† JavaScript v√† b·∫•t k·ªÉ th·ª© g√¨

[38;2;118;181;197m17
[0m00:00:49,250 --> 00:00:51,760
if you write vanilla JavaScript or some
n·∫øu b·∫°n vi·∫øt JavaScript vanilla ho·∫∑c m·ªôt s·ªë

[38;2;118;181;197m18
[0m00:00:51,760 --> 00:00:54,713
JavaScript framework like React or Angular code,
Khung JavaScript nh∆∞ m√£ React ho·∫∑c Angular,

[38;2;118;181;197m19
[0m00:00:54,713 --> 00:00:56,370
that's all just JavaScript
t·∫•t c·∫£ ch·ªâ l√† JavaScript

[38;2;118;181;197m20
[0m00:00:56,370 --> 00:00:59,920
that gets executed right in the browser.
ƒë∆∞·ª£c th·ª±c thi ngay trong tr√¨nh duy·ªát.

[38;2;118;181;197m21
[0m00:00:59,920 --> 00:01:01,500
So, in this case, the browser
V√¨ v·∫≠y, trong tr∆∞·ªùng h·ª£p n√†y, tr√¨nh duy·ªát

[38;2;118;181;197m22
[0m00:01:01,500 --> 00:01:03,454
is then the JavaScript Runtime.
sau ƒë√≥ l√† Th·ªùi gian ch·∫°y JavaScript.

[38;2;118;181;197m23
[0m00:01:03,454 --> 00:01:06,110
But, what if we could take JavaScript
Nh∆∞ng, ƒëi·ªÅu g√¨ s·∫Ω x·∫£y ra n·∫øu ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng JavaScript

[38;2;118;181;197m24
[0m00:01:06,110 --> 00:01:08,311
out of the browser and simply execute
ra kh·ªèi tr√¨nh duy·ªát v√† ch·ªâ c·∫ßn th·ª±c hi·ªán

[38;2;118;181;197m25
[0m00:01:08,311 --> 00:01:10,988
or JavaScript code somewhere else without
ho·∫∑c m√£ JavaScript ·ªü m·ªôt n∆°i kh√°c m√† kh√¥ng c√≥

[38;2;118;181;197m26
[0m00:01:10,988 --> 00:01:14,860
all the restrictions that we have in the browser?
t·∫•t c·∫£ nh·ªØng h·∫°n ch·∫ø m√† ch√∫ng t√¥i c√≥ trong tr√¨nh duy·ªát?

[38;2;118;181;197m27
[0m00:01:14,860 --> 00:01:17,580
Well, it turns out that we actually can.
Ch√†, h√≥a ra l√† ch√∫ng ta th·ª±c s·ª± c√≥ th·ªÉ.

[38;2;118;181;197m28
[0m00:01:17,580 --> 00:01:19,955
And the solution for this, as you can guess,
V√† gi·∫£i ph√°p cho vi·ªác n√†y, nh∆∞ b·∫°n c√≥ th·ªÉ ƒëo√°n,

[38;2;118;181;197m29
[0m00:01:19,955 --> 00:01:23,425
is called NodeJS and so Node JS
ƒë∆∞·ª£c g·ªçi l√† NodeJS v√† v√¨ v·∫≠y Node JS

[38;2;118;181;197m30
[0m00:01:23,425 --> 00:01:25,830
is just another JavaScript Runtime.
ch·ªâ l√† m·ªôt Th·ªùi gian ch·∫°y JavaScript kh√°c.

[38;2;118;181;197m31
[0m00:01:25,830 --> 00:01:29,252
It's just like a container, like an environment,
N√≥ gi·ªëng nh∆∞ m·ªôt v·∫≠t ch·ª©a, nh∆∞ m·ªôt m√¥i tr∆∞·ªùng,

[38;2;118;181;197m32
[0m00:01:29,252 --> 00:01:32,010
in which a program written in JavaScript
trong ƒë√≥ m·ªôt ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c vi·∫øt b·∫±ng JavaScript

[38;2;118;181;197m33
[0m00:01:32,010 --> 00:01:37,010
can be executed, but outside of any browser whatsoever.
c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c thi, nh∆∞ng b√™n ngo√†i b·∫•t k·ª≥ tr√¨nh duy·ªát n√†o.

[38;2;118;181;197m34
[0m00:01:37,230 --> 00:01:39,850
All right, it's actually a bit more complex
ƒê∆∞·ª£c r·ªìi, n√≥ th·ª±c s·ª± ph·ª©c t·∫°p h∆°n m·ªôt ch√∫t

[38;2;118;181;197m35
[0m00:01:39,850 --> 00:01:42,908
than this, of course, but for now, this is enough.
t·∫•t nhi√™n l√† h∆°n th·∫ø n√†y, nh∆∞ng hi·ªán t·∫°i th√¨ th·∫ø l√† ƒë·ªß r·ªìi.

[38;2;118;181;197m36
[0m00:01:42,908 --> 00:01:45,380
Now, who actually does execute
B√¢y gi·ªù, ai th·ª±c s·ª± th·ª±c thi

[38;2;118;181;197m37
[0m00:01:45,380 --> 00:01:47,438
the code if not the browser?
m√£ n·∫øu kh√¥ng ph·∫£i l√† tr√¨nh duy·ªát?

[38;2;118;181;197m38
[0m00:01:47,438 --> 00:01:50,070
And that's where the V8 engine
V√† ƒë√≥ l√† n∆°i ƒë·ªông c∆° V8

[38;2;118;181;197m39
[0m00:01:50,070 --> 00:01:52,770
developed by Google comes into play.
do Google ph√°t tri·ªÉn s·∫Ω ph√°t huy t√°c d·ª•ng.

[38;2;118;181;197m40
[0m00:01:52,770 --> 00:01:55,420
Because that is exactly where JavaScript code
B·ªüi v√¨ ƒë√≥ ch√≠nh x√°c l√† n∆°i m√£ JavaScript

[38;2;118;181;197m41
[0m00:01:55,420 --> 00:01:59,800
will be parsed and run in NodeJS, okay?
s·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch c√∫ ph√°p v√† ch·∫°y trong NodeJS, ƒë∆∞·ª£c ch·ª©?

[38;2;118;181;197m42
[0m00:01:59,800 --> 00:02:02,819
So, I hope that now the definition of NodeJS
V√¨ v·∫≠y, t√¥i hy v·ªçng r·∫±ng b√¢y gi·ªù ƒë·ªãnh nghƒ©a v·ªÅ NodeJS

[38;2;118;181;197m43
[0m00:02:02,819 --> 00:02:07,116
being a JavaScript Runtime on the V8 JavaScript engine
l√† Th·ªùi gian ch·∫°y JavaScript tr√™n c√¥ng c·ª• JavaScript V8

[38;2;118;181;197m44
[0m00:02:07,116 --> 00:02:10,104
makes a lot more sense and again,
c√≥ √Ω nghƒ©a h∆°n nhi·ªÅu v√† m·ªôt l·∫ßn n·ªØa,

[38;2;118;181;197m45
[0m00:02:10,104 --> 00:02:12,742
this is just a very high level overview
ƒë√¢y ch·ªâ l√† m·ªôt c√°i nh√¨n t·ªïng quan ·ªü c·∫•p ƒë·ªô r·∫•t cao

[38;2;118;181;197m46
[0m00:02:12,742 --> 00:02:16,060
of what Node is and how it works.
Node l√† g√¨ v√† n√≥ ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o.

[38;2;118;181;197m47
[0m00:02:16,060 --> 00:02:18,430
We are gonna go into a lot of detail
Ch√∫ng ta s·∫Ω ƒëi v√†o r·∫•t nhi·ªÅu chi ti·∫øt

[38;2;118;181;197m48
[0m00:02:18,430 --> 00:02:20,926
about how Node really works behind the scenes
v·ªÅ c√°ch Node th·ª±c s·ª± ho·∫°t ƒë·ªông ƒë·∫±ng sau h·∫≠u tr∆∞·ªùng

[38;2;118;181;197m49
[0m00:02:20,926 --> 00:02:23,860
right in the next section, but at this point,
ngay trong ph·∫ßn ti·∫øp theo, nh∆∞ng t·∫°i th·ªùi ƒëi·ªÉm n√†y,

[38;2;118;181;197m50
[0m00:02:23,860 --> 00:02:26,152
I just want you to get a quick overview
T√¥i ch·ªâ mu·ªën b·∫°n c√≥ ƒë∆∞·ª£c m·ªôt c√°i nh√¨n t·ªïng quan nhanh ch√≥ng

[38;2;118;181;197m51
[0m00:02:26,152 --> 00:02:28,810
so that you can start learning the fundamentals
ƒë·ªÉ b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu h·ªçc nh·ªØng ki·∫øn ‚Äã‚Äãth·ª©c c∆° b·∫£n

[38;2;118;181;197m52
[0m00:02:28,810 --> 00:02:32,203
of NodeJS in practice throughout this section.
c·ªßa NodeJS trong th·ª±c t·∫ø xuy√™n su·ªët ph·∫ßn n√†y.

[38;2;118;181;197m53
[0m00:02:34,000 --> 00:02:36,230
Anyway, now that we have JavaScript
D√π sao th√¨ b√¢y gi·ªù ch√∫ng ta ƒë√£ c√≥ JavaScript

[38;2;118;181;197m54
[0m00:02:36,230 --> 00:02:38,400
outside of the browser in a kind of
b√™n ngo√†i tr√¨nh duy·ªát theo ki·ªÉu

[38;2;118;181;197m55
[0m00:02:38,400 --> 00:02:40,704
stand alone environment which just NodeJS,
m√¥i tr∆∞·ªùng ƒë·ªôc l·∫≠p ch·ªâ c√≥ NodeJS,

[38;2;118;181;197m56
[0m00:02:40,704 --> 00:02:44,058
we can do so many more things with JavaScript
ch√∫ng ta c√≥ th·ªÉ l√†m ƒë∆∞·ª£c nhi·ªÅu th·ª© h∆°n n·ªØa v·ªõi JavaScript

[38;2;118;181;197m57
[0m00:02:44,058 --> 00:02:46,690
that were completely impossible before
ƒëi·ªÅu ƒë√≥ ho√†n to√†n kh√¥ng th·ªÉ tr∆∞·ªõc ƒë√¢y

[38;2;118;181;197m58
[0m00:02:46,690 --> 00:02:48,254
like accessing the file system,
nh∆∞ truy c·∫≠p v√†o h·ªá th·ªëng t·∫≠p tin,

[38;2;118;181;197m59
[0m00:02:48,254 --> 00:02:50,515
or better networking capabilities
ho·∫∑c kh·∫£ nƒÉng k·∫øt n·ªëi m·∫°ng t·ªët h∆°n

[38;2;118;181;197m60
[0m00:02:50,515 --> 00:02:53,054
are not possible with NodeJS
kh√¥ng th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c v·ªõi NodeJS

[38;2;118;181;197m61
[0m00:02:53,054 --> 00:02:55,630
and all these factors together give us
v√† t·∫•t c·∫£ nh·ªØng y·∫øu t·ªë n√†y c√πng nhau cho ch√∫ng ta

[38;2;118;181;197m62
[0m00:02:55,630 --> 00:02:59,750
the perfect conditions for using NodeJS as a web server
ƒëi·ªÅu ki·ªán ho√†n h·∫£o ƒë·ªÉ s·ª≠ d·ª•ng NodeJS l√†m m√°y ch·ªß web

[38;2;118;181;197m63
[0m00:02:59,750 --> 00:03:02,327
meaning that now we can finally use JavaScript
nghƒ©a l√† b√¢y gi·ªù ch√∫ng ta cu·ªëi c√πng c≈©ng c√≥ th·ªÉ s·ª≠ d·ª•ng JavaScript

[38;2;118;181;197m64
[0m00:03:02,327 --> 00:03:05,550
on the server side of web development
v·ªÅ ph√≠a m√°y ch·ªß c·ªßa ph√°t tri·ªÉn web

[38;2;118;181;197m65
[0m00:03:05,550 --> 00:03:08,020
in order to build fast, highly scalable
ƒë·ªÉ x√¢y d·ª±ng nhanh ch√≥ng, c√≥ kh·∫£ nƒÉng m·ªü r·ªông cao

[38;2;118;181;197m66
[0m00:03:08,020 --> 00:03:10,810
network applications for powering the back-end
c√°c ·ª©ng d·ª•ng m·∫°ng ƒë·ªÉ c·∫•p ngu·ªìn cho back-end

[38;2;118;181;197m67
[0m00:03:10,810 --> 00:03:13,540
all for websites or web applications.
t·∫•t c·∫£ cho c√°c trang web ho·∫∑c ·ª©ng d·ª•ng web.

[38;2;118;181;197m68
[0m00:03:13,540 --> 00:03:15,990
And this is absolutely fantastic
V√† ƒëi·ªÅu n√†y ho√†n to√†n tuy·ªát v·ªùi

[38;2;118;181;197m69
[0m00:03:15,990 --> 00:03:19,030
and game-changing for web development.
v√† thay ƒë·ªïi tr√≤ ch∆°i ƒë·ªÉ ph√°t tri·ªÉn web.

[38;2;118;181;197m70
[0m00:03:19,030 --> 00:03:22,103
So, let's now take a look at some use cases for Node
V√¨ v·∫≠y, b√¢y gi·ªù ch√∫ng ta h√£y xem x√©t m·ªôt s·ªë tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng Node

[38;2;118;181;197m71
[0m00:03:22,103 --> 00:03:25,703
and why it's such a great fit for back-end development.
v√† t·∫°i sao n√≥ l·∫°i r·∫•t ph√π h·ª£p cho vi·ªác ph√°t tri·ªÉn back-end.

[38;2;118;181;197m72
[0m00:03:27,010 --> 00:03:29,430
And the first thing that we need to talk about
V√† ƒëi·ªÅu ƒë·∫ßu ti√™n ch√∫ng ta c·∫ßn n√≥i ƒë·∫øn

[38;2;118;181;197m73
[0m00:03:29,430 --> 00:03:31,060
is the fact that Node applications
th·ª±c t·∫ø l√† c√°c ·ª©ng d·ª•ng Node

[38;2;118;181;197m74
[0m00:03:31,060 --> 00:03:34,603
are so fast and so scalable because NodeJS
r·∫•t nhanh v√† c√≥ th·ªÉ m·ªü r·ªông nh·ªù NodeJS

[38;2;118;181;197m75
[0m00:03:34,603 --> 00:03:36,705
is single threaded based on
l√† m·ªôt lu·ªìng d·ª±a tr√™n

[38;2;118;181;197m76
[0m00:03:36,705 --> 00:03:40,110
an event driven, non-blocking I/O model
m·ªôt m√¥ h√¨nh I/O kh√¥ng ch·∫∑n, h∆∞·ªõng s·ª± ki·ªán

[38;2;118;181;197m77
[0m00:03:40,110 --> 00:03:43,932
which makes NodeJS very lightweight and efficient.
ƒëi·ªÅu n√†y l√†m cho NodeJS r·∫•t nh·∫π v√† hi·ªáu qu·∫£.

[38;2;118;181;197m78
[0m00:03:43,932 --> 00:03:47,140
Now, that, of course, sounds super complicated,
T·∫•t nhi√™n, ƒëi·ªÅu ƒë√≥ nghe c√≥ v·∫ª c·ª±c k·ª≥ ph·ª©c t·∫°p,

[38;2;118;181;197m79
[0m00:03:47,140 --> 00:03:50,040
I know, but once more we're gonna talk about
T√¥i bi·∫øt, nh∆∞ng m·ªôt l·∫ßn n·ªØa ch√∫ng ta s·∫Ω n√≥i v·ªÅ

[38;2;118;181;197m80
[0m00:03:50,040 --> 00:03:52,146
exactly what all of this means
ch√≠nh x√°c t·∫•t c·∫£ nh·ªØng ƒëi·ªÅu n√†y c√≥ nghƒ©a l√† g√¨

[38;2;118;181;197m81
[0m00:03:52,146 --> 00:03:54,110
a little late in the course.
m·ªôt ch√∫t mu·ªôn trong kh√≥a h·ªçc.

[38;2;118;181;197m82
[0m00:03:54,110 --> 00:03:56,250
But, for now, just keep in mind
Nh∆∞ng b√¢y gi·ªù, h√£y nh·ªõ r·∫±ng

[38;2;118;181;197m83
[0m00:03:56,250 --> 00:03:59,052
that Node is perfect for building super fast,
Node ƒë√≥ ho√†n h·∫£o ƒë·ªÉ x√¢y d·ª±ng si√™u nhanh,

[38;2;118;181;197m84
[0m00:03:59,052 --> 00:04:02,910
and scalable data-intensive web applications.
v√† c√°c ·ª©ng d·ª•ng web s·ª≠ d·ª•ng nhi·ªÅu d·ªØ li·ªáu c√≥ th·ªÉ m·ªü r·ªông.

[38;2;118;181;197m85
[0m00:04:02,910 --> 00:04:06,280
And that makes NodeJS a perfect fit for building
V√† ƒëi·ªÅu ƒë√≥ l√†m cho NodeJS ho√†n to√†n ph√π h·ª£p ƒë·ªÉ x√¢y d·ª±ng

[38;2;118;181;197m86
[0m00:04:06,280 --> 00:04:08,580
all different kinds of applications like
t·∫•t c·∫£ c√°c lo·∫°i ·ª©ng d·ª•ng kh√°c nhau nh∆∞

[38;2;118;181;197m87
[0m00:04:08,580 --> 00:04:11,830
building an API with a database behind it
x√¢y d·ª±ng m·ªôt API v·ªõi c∆° s·ªü d·ªØ li·ªáu ƒë·∫±ng sau n√≥

[38;2;118;181;197m88
[0m00:04:11,830 --> 00:04:16,830
and preferably a non-relational NoSQL database like MongoDB
v√† t·ªët nh·∫•t l√† c∆° s·ªü d·ªØ li·ªáu NoSQL kh√¥ng quan h·ªá nh∆∞ MongoDB

[38;2;118;181;197m89
[0m00:04:17,090 --> 00:04:20,250
and this is actually exactly what we're gonna do later
v√† ƒë√¢y th·ª±c s·ª± ch√≠nh x√°c l√† nh·ªØng g√¨ ch√∫ng ta s·∫Ω l√†m sau n√†y

[38;2;118;181;197m90
[0m00:04:20,250 --> 00:04:24,568
in this course as we dive deeper and deeper into NodeJS.
trong kh√≥a h·ªçc n√†y khi ch√∫ng ta ng√†y c√†ng ƒëi s√¢u h∆°n v√†o NodeJS.

[38;2;118;181;197m91
[0m00:04:24,568 --> 00:04:27,350
But, there is, of course, all sorts of other apps
Tuy nhi√™n, t·∫•t nhi√™n l√† c√≥ t·∫•t c·∫£ c√°c lo·∫°i ·ª©ng d·ª•ng kh√°c

[38;2;118;181;197m92
[0m00:04:27,350 --> 00:04:30,007
that we can build like data streaming applications
m√† ch√∫ng t√¥i c√≥ th·ªÉ x√¢y d·ª±ng gi·ªëng nh∆∞ c√°c ·ª©ng d·ª•ng truy·ªÅn d·ªØ li·ªáu

[38;2;118;181;197m93
[0m00:04:30,007 --> 00:04:33,739
such as YouTube or Netflix, real-time chat apps,
ch·∫≥ng h·∫°n nh∆∞ YouTube ho·∫∑c Netflix, ·ª©ng d·ª•ng tr√≤ chuy·ªán th·ªùi gian th·ª±c,

[38;2;118;181;197m94
[0m00:04:33,739 --> 00:04:36,600
or even server-side web applications
ho·∫∑c th·∫≠m ch√≠ c√°c ·ª©ng d·ª•ng web ph√≠a m√°y ch·ªß

[38;2;118;181;197m95
[0m00:04:36,600 --> 00:04:39,430
where the entire content is simply generated
n∆°i to√†n b·ªô n·ªôi dung ƒë∆∞·ª£c t·∫°o ƒë∆°n gi·∫£n

[38;2;118;181;197m96
[0m00:04:39,430 --> 00:04:42,055
right on the server, so as you see,
ngay tr√™n m√°y ch·ªß, nh∆∞ b·∫°n th·∫•y,

[38;2;118;181;197m97
[0m00:04:42,055 --> 00:04:44,684
the possibilities really are endless.
Nh·ªØng kh·∫£ nƒÉng l√† v√¥ t·∫≠n.

[38;2;118;181;197m98
[0m00:04:44,684 --> 00:04:47,650
But, there is actually, also, a type of apps
Tuy nhi√™n, th·ª±c t·∫ø c≈©ng c√≥ m·ªôt lo·∫°i ·ª©ng d·ª•ng

[38;2;118;181;197m99
[0m00:04:47,650 --> 00:04:49,990
that we should not build with Node.
r·∫±ng ch√∫ng ta kh√¥ng n√™n x√¢y d·ª±ng b·∫±ng Node.

[38;2;118;181;197m100
[0m00:04:49,990 --> 00:04:51,890
And this is when our app needs
V√† ƒë√¢y l√† l√∫c ·ª©ng d·ª•ng c·ªßa ch√∫ng ta c·∫ßn

[38;2;118;181;197m101
[0m00:04:51,890 --> 00:04:54,380
some super heavy server-side processing
m·ªôt s·ªë x·ª≠ l√Ω ph√≠a m√°y ch·ªß si√™u n·∫∑ng

[38;2;118;181;197m102
[0m00:04:54,380 --> 00:04:57,750
like having image manipulations, video conversion,
nh∆∞ thao t√°c h√¨nh ·∫£nh, chuy·ªÉn ƒë·ªïi video,

[38;2;118;181;197m103
[0m00:04:57,750 --> 00:05:01,270
file compression or anything like that, all right.
n√©n t·∫≠p tin ho·∫∑c b·∫•t c·ª© th·ª© g√¨ t∆∞∆°ng t·ª±, ƒë∆∞·ª£c r·ªìi.

[38;2;118;181;197m104
[0m00:05:01,270 --> 00:05:04,930
And you will learn why that is once we dive deeper
V√† b·∫°n s·∫Ω bi·∫øt t·∫°i sao l·∫°i nh∆∞ v·∫≠y khi ch√∫ng ta t√¨m hi·ªÉu s√¢u h∆°n

[38;2;118;181;197m105
[0m00:05:04,930 --> 00:05:07,410
into how Node actually works.
v√†o c√°ch Node th·ª±c s·ª± ho·∫°t ƒë·ªông.

[38;2;118;181;197m106
[0m00:05:07,410 --> 00:05:09,500
So, in this case, we're better off
V√¨ v·∫≠y, trong tr∆∞·ªùng h·ª£p n√†y, t·ªët h∆°n h·∫øt l√† ch√∫ng ta n√™n

[38;2;118;181;197m107
[0m00:05:09,500 --> 00:05:14,010
using something like Ruby on Rails, PHP, or Python.
s·ª≠ d·ª•ng th·ª© g√¨ ƒë√≥ nh∆∞ Ruby on Rails, PHP ho·∫∑c Python.

[38;2;118;181;197m108
[0m00:05:14,010 --> 00:05:16,460
Because NodeJS just wasn't developed
B·ªüi v√¨ NodeJS ch∆∞a ƒë∆∞·ª£c ph√°t tri·ªÉn

[38;2;118;181;197m109
[0m00:05:16,460 --> 00:05:19,910
for these use cases and although there are solutions
cho nh·ªØng tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng n√†y v√† m·∫∑c d√π c√≥ nh·ªØng gi·∫£i ph√°p

[38;2;118;181;197m110
[0m00:05:19,910 --> 00:05:22,480
for dealing with them, we should always use
ƒë·ªÉ ƒë·ªëi ph√≥ v·ªõi ch√∫ng, ch√∫ng ta n√™n lu√¥n lu√¥n s·ª≠ d·ª•ng

[38;2;118;181;197m111
[0m00:05:22,480 --> 00:05:25,157
the right tool for the task at hand.
c√¥ng c·ª• ph√π h·ª£p cho nhi·ªám v·ª• tr∆∞·ªõc m·∫Øt.

[38;2;118;181;197m112
[0m00:05:25,157 --> 00:05:28,361
Okay, so these are the types of applications
ƒê∆∞·ª£c r·ªìi, ƒë√¢y l√† nh·ªØng lo·∫°i ·ª©ng d·ª•ng

[38;2;118;181;197m113
[0m00:05:28,361 --> 00:05:31,977
that we can and cannot build using NodeJS.
m√† ch√∫ng ta c√≥ th·ªÉ v√† kh√¥ng th·ªÉ x√¢y d·ª±ng b·∫±ng NodeJS.

[38;2;118;181;197m114
[0m00:05:31,977 --> 00:05:34,780
And if you choose to use Node,
V√† n·∫øu b·∫°n ch·ªçn s·ª≠ d·ª•ng Node,

[38;2;118;181;197m115
[0m00:05:34,780 --> 00:05:37,540
well, then you are in good company because
t·ªët, v·∫≠y th√¨ b·∫°n ƒëang ·ªü trong m·ªôt c√¥ng ty t·ªët b·ªüi v√¨

[38;2;118;181;197m116
[0m00:05:37,540 --> 00:05:41,206
many top companies like Netflix, Uber, PayPal,
nhi·ªÅu c√¥ng ty h√†ng ƒë·∫ßu nh∆∞ Netflix, Uber, PayPal,

[38;2;118;181;197m117
[0m00:05:41,206 --> 00:05:45,140
Ebay and many many more have already started using
Ebay v√† nhi·ªÅu trang kh√°c ƒë√£ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng

[38;2;118;181;197m118
[0m00:05:45,140 --> 00:05:48,910
NodeJS which really proves that the technology
NodeJS th·ª±c s·ª± ch·ª©ng minh r·∫±ng c√¥ng ngh·ªá

[38;2;118;181;197m119
[0m00:05:48,910 --> 00:05:52,850
is stable enough at this point to be used in production.
t·∫°i th·ªùi ƒëi·ªÉm n√†y ƒë·ªß ·ªïn ƒë·ªãnh ƒë·ªÉ s·ª≠ d·ª•ng trong s·∫£n xu·∫•t.

[38;2;118;181;197m120
[0m00:05:52,850 --> 00:05:56,125
Now, of course there are more reasons for using Node,
T·∫•t nhi√™n b√¢y gi·ªù c√≥ nhi·ªÅu l√Ω do h∆°n ƒë·ªÉ s·ª≠ d·ª•ng Node,

[38;2;118;181;197m121
[0m00:05:56,125 --> 00:05:59,040
and the biggest one is probably that using
v√† c√°i l·ªõn nh·∫•t c√≥ l·∫Ω l√† vi·ªác s·ª≠ d·ª•ng

[38;2;118;181;197m122
[0m00:05:59,040 --> 00:06:01,650
the same language across your entire stack
c√πng m·ªôt ng√¥n ng·ªØ tr√™n to√†n b·ªô ngƒÉn x·∫øp c·ªßa b·∫°n

[38;2;118;181;197m123
[0m00:06:01,650 --> 00:06:03,758
both on the front-end and the back-end
c·∫£ ·ªü m·∫∑t tr∆∞·ªõc v√† m·∫∑t sau

[38;2;118;181;197m124
[0m00:06:03,758 --> 00:06:07,420
is a lot easier for you or for your team.
s·∫Ω d·ªÖ d√†ng h∆°n r·∫•t nhi·ªÅu cho b·∫°n ho·∫∑c cho nh√≥m c·ªßa b·∫°n.

[38;2;118;181;197m125
[0m00:06:07,420 --> 00:06:09,010
First, you don't have to learn
ƒê·∫ßu ti√™n, b·∫°n kh√¥ng c·∫ßn ph·∫£i h·ªçc

[38;2;118;181;197m126
[0m00:06:09,010 --> 00:06:11,070
a new programming language for building
m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh m·ªõi ƒë·ªÉ x√¢y d·ª±ng

[38;2;118;181;197m127
[0m00:06:11,070 --> 00:06:13,580
your back-end and, also, you don't have to
back-end c·ªßa b·∫°n v√† ngo√†i ra, b·∫°n kh√¥ng c·∫ßn ph·∫£i

[38;2;118;181;197m128
[0m00:06:13,580 --> 00:06:15,824
keep switching back and forth between language
ti·∫øp t·ª•c chuy·ªÉn ƒë·ªïi qua l·∫°i gi·ªØa ng√¥n ng·ªØ

[38;2;118;181;197m129
[0m00:06:15,824 --> 00:06:18,450
which will make the entire building process
ƒëi·ªÅu n√†y s·∫Ω l√†m cho to√†n b·ªô qu√° tr√¨nh x√¢y d·ª±ng

[38;2;118;181;197m130
[0m00:06:18,450 --> 00:06:20,533
faster and more efficient.
nhanh h∆°n v√† hi·ªáu qu·∫£ h∆°n.

[38;2;118;181;197m131
[0m00:06:20,533 --> 00:06:23,107
Believe me, it's really really amazing
Tin t√¥i ƒëi, n√≥ th·ª±c s·ª± r·∫•t tuy·ªát v·ªùi

[38;2;118;181;197m132
[0m00:06:23,107 --> 00:06:26,230
to be able to use JavaScript to build
c√≥ th·ªÉ s·ª≠ d·ª•ng JavaScript ƒë·ªÉ x√¢y d·ª±ng

[38;2;118;181;197m133
[0m00:06:26,230 --> 00:06:29,215
your entire application from start to finish.
to√†n b·ªô ·ª©ng d·ª•ng c·ªßa b·∫°n t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi.

[38;2;118;181;197m134
[0m00:06:29,215 --> 00:06:31,727
It's absolutely fantastic really.
N√≥ th·ª±c s·ª± tuy·ªát v·ªùi.

[38;2;118;181;197m135
[0m00:06:31,727 --> 00:06:34,150
And another great reason for using Node
V√† m·ªôt l√Ω do tuy·ªát v·ªùi kh√°c ƒë·ªÉ s·ª≠ d·ª•ng Node

[38;2;118;181;197m136
[0m00:06:34,150 --> 00:06:38,502
is that there is a huge library of open-source packages
l√† c√≥ m·ªôt th∆∞ vi·ªán kh·ªïng l·ªì c√°c g√≥i ngu·ªìn m·ªü

[38;2;118;181;197m137
[0m00:06:38,502 --> 00:06:41,450
or modules, as we can also call them,
ho·∫∑c m√¥-ƒëun, nh∆∞ ch√∫ng ta c≈©ng c√≥ th·ªÉ g·ªçi ch√∫ng,

[38;2;118;181;197m138
[0m00:06:41,450 --> 00:06:43,884
available for everyone for free.
c√≥ s·∫µn mi·ªÖn ph√≠ cho m·ªçi ng∆∞·ªùi.

[38;2;118;181;197m139
[0m00:06:43,884 --> 00:06:47,190
It's called NPM and you've probably heard of it
N√≥ ƒë∆∞·ª£c g·ªçi l√† NPM v√† c√≥ th·ªÉ b·∫°n ƒë√£ t·ª´ng nghe ƒë·∫øn n√≥

[38;2;118;181;197m140
[0m00:06:47,190 --> 00:06:48,976
or even used it already.
ho·∫∑c th·∫≠m ch√≠ ƒë√£ s·ª≠ d·ª•ng n√≥ r·ªìi.

[38;2;118;181;197m141
[0m00:06:48,976 --> 00:06:51,170
And, of course, we're also gonna start
V√† t·∫•t nhi√™n, ch√∫ng ta c≈©ng s·∫Ω b·∫Øt ƒë·∫ßu

[38;2;118;181;197m142
[0m00:06:51,170 --> 00:06:53,563
using packages right in the section.
s·ª≠ d·ª•ng c√°c g√≥i ngay trong ph·∫ßn.

[38;2;118;181;197m143
[0m00:06:54,430 --> 00:06:56,920
And, finally, it's also good to know
V√† cu·ªëi c√πng, c≈©ng th·∫≠t t·ªët khi bi·∫øt

[38;2;118;181;197m144
[0m00:06:56,920 --> 00:06:59,420
that there is a huge active community
r·∫±ng c√≥ m·ªôt c·ªông ƒë·ªìng nƒÉng ƒë·ªông r·∫•t l·ªõn

[38;2;118;181;197m145
[0m00:06:59,420 --> 00:07:02,020
of Node developers out there that are constantly
c·ªßa c√°c nh√† ph√°t tri·ªÉn Node ngo√†i kia li√™n t·ª•c

[38;2;118;181;197m146
[0m00:07:02,020 --> 00:07:05,650
improving NodeJS and helping beginners like you.
c·∫£i thi·ªán NodeJS v√† gi√∫p ƒë·ª° nh·ªØng ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu nh∆∞ b·∫°n.

[38;2;118;181;197m147
[0m00:07:05,650 --> 00:07:08,670
And, so you can really rely on the technology
V√†, v√¨ v·∫≠y b·∫°n c√≥ th·ªÉ th·ª±c s·ª± tin c·∫≠y v√†o c√¥ng ngh·ªá

[38;2;118;181;197m148
[0m00:07:08,670 --> 00:07:11,929
for all your projects in the years to come.
cho t·∫•t c·∫£ c√°c d·ª± √°n c·ªßa b·∫°n trong nh·ªØng nƒÉm t·ªõi.

[38;2;118;181;197m149
[0m00:07:11,929 --> 00:07:15,343
Okay, so that was a very brief intro
ƒê∆∞·ª£c r·ªìi, ƒë√≥ l√† ph·∫ßn gi·ªõi thi·ªáu r·∫•t ng·∫Øn g·ªçn

[38;2;118;181;197m150
[0m00:07:15,343 --> 00:07:20,040
and overview of NodeJS and some of it's use cases.
v√† t·ªïng quan v·ªÅ NodeJS c≈©ng nh∆∞ m·ªôt s·ªë tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ªßa n√≥.

[38;2;118;181;197m151
[0m00:07:20,040 --> 00:07:21,920
So, for the rest of this section,
V√¨ v·∫≠y, trong ph·∫ßn c√≤n l·∫°i c·ªßa ph·∫ßn n√†y,

[38;2;118;181;197m152
[0m00:07:21,920 --> 00:07:23,810
we will now use Node to create
b√¢y gi·ªù ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng Node ƒë·ªÉ t·∫°o

[38;2;118;181;197m153
[0m00:07:23,810 --> 00:07:25,950
a very simple web server and build
m·ªôt m√°y ch·ªß web r·∫•t ƒë∆°n gi·∫£n v√† x√¢y d·ª±ng

[38;2;118;181;197m154
[0m00:07:25,950 --> 00:07:28,750
an extremely simple API, so that
m·ªôt API c·ª±c k·ª≥ ƒë∆°n gi·∫£n, do ƒë√≥

[38;2;118;181;197m155
[0m00:07:28,750 --> 00:07:30,160
you can get familiar with
b·∫°n c√≥ th·ªÉ l√†m quen v·ªõi

[38;2;118;181;197m156
[0m00:07:30,160 --> 00:07:32,763
the basic principles of Node development.
c√°c nguy√™n t·∫Øc c∆° b·∫£n c·ªßa ph√°t tri·ªÉn Node.

